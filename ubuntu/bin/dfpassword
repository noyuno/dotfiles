#!/bin/bash -e

pub=~/.gnupg/pubring.gpg
sec=~/.gnupg/secring.gpg
rsa=~/.ssh/id_rsa

dir=/tmp/dfpasswd_$RANDOM
help()
{
    name=${0##*/}
    {
        cat << EOF
Usage: $name [options]
Options
-r <string>     Real name 
-n <string>     User name 
-g <string>     Gmail address 
-p <string>     Gmail password 
-h <string>     RSA/GPG passphrase 
-u <string>     GPG public keyring path 
-s <string>     GPG secret keyring path 
-a <string>     RSA secret key path. (Public key will be located secret 
                key path with '.pub'.)
--dry-run       dry run 
--force         force 
--nokey         Don't create RSA/GPG key.
EOF
    } 1>&2
exit 1
} 

askow()
{
    if [ "$force" = "" ]; then
        if [  -e "$1" ]; then 
            echo -n "$1 has already exists. Do you overwrite it?[y/N]" 1>/dev/tty
            read ow

            case "$ow" in
                y|Y|yes|YES|Yes) echo 'y' ;;
                *)               echo 'n' ;;
            esac
        else
            echo 'y'
        fi 
    else
        echo 'y'
    fi 
}
    
copy()
{
    [ ! -d "$(dirname $2)" ] && mkdir -p "$(dirname $2)"
    cp -Rvf "$1" "$2"
}

encrypt()
{
    if [ ! "$dryrun" ]; then 
        gpg2 --passphrase-fd 0 -r "$gmail" --trust-model always \
            --default-recipient-self --passphrase "$phrase" -e "$1"
        if [ "$(askow "$2")" = "y" ]; then
            copy "$1.gpg" "$2"
        fi 
    else
        cat "$1"
    fi
}

readkey()
{
    a=$(eval echo '$'$1)
    if [ "$a" = "" ]; then 
        echo -n "$2: "
        if [ "$3" = "-s" ]; then 
            read -s b
            printf "\n"
        else
            read b
        fi 
        eval $1=$(printf %q "$b")
    fi 
}

args=$(getopt -o r:n:g:p:h:u:s:a: --long dry-ryn --long force --long no-key)
while [ $# -gt 0 ]; do
    case "$1" in
        -r)         real=$2; shift ;;
        -n)         name=$2; shift ;;
        -g)         gmail=$2; shift ;;
        -p)         gpass=$2; shift ;;
        -h)         phrase=$2; shift ;;
        -u)         pub=$2; shift ;;
        -s)         sec=$2; shift ;;
        -a)         rsa=$2; shift ;;
        --dry-run)  dryrun=1 ;;
        --force)    force=1 ;;
        --no-key)   nokey=1 ;;
        *) help ;;
    esac
    shift
done 

if [ "$(which ssh-agent)" = "" ]; then 
    sudo apt install -y openssh-client &&:
    [ $? -ne 0 ] && echo 'ssh-agent not found. Please install openssh-client' 1>&2 && fatal=1
fi 
if [ "$(which gpg2)" = "" ]; then
    sudo apt install -y gnupg2 &&:
    [ $? -ne 0 ] && echo 'gpg2 not found. Please install gnupg2' 1>&2 && fatal=1
fi
[ "$HOME" = "" ] && echo '$HOME not found.' 1>&2 && fatal=1
[ "$fatal" ] && exit 1

readkey real 'Real name'
readkey name 'Name'
readkey gmail 'Gmail address'
readkey gpass 'Gmail password' -s
if [ ! "$nokey" ]; then
    readkey phrase 'RSA/GPG passphrase' -s
fi 

mkdir -p "$dir"
if [ ! "$nokey" ]; then
    echo 'Creating RSA key'
    if [ "$(askow ~/.ssh/id_rsa)" = 'y' ]; then 
        if [ ! "$dryrun" ]; then
            if [ -e "$rsa" ]; then 
                mv "$rsa" ~/.ssh/id_rsa.old 
                mv "$rsa.pub" ~/.ssh/id_rsa.pub.old
            fi 
            ssh-keygen -t rsa -N "$phrase" -f "$rsa"
            echo 'Please add ssh key to CVS.'
            echo 
            cat ~/.ssh/id_rsa.pub
            echo
            eval $(ssh-agent)
            ssh-add
        fi 
    fi 

    echo 'Creating GPG key'
    cat >$dir/batch <<EOF
    %echo Generating a basic OpenPGP key
    Key-Type: RSA
    Key-Length: 2048
    Subkey-Type: RSA
    Subkey-Length: 2048
    Name-Real: $name
    Name-Email: $gmail
    Expire-Date: 0
    Passphrase: $phrase
    %pubring $pub
    %secring $sec
    %commit
    %echo done
EOF

    if [ "$(askow ~/.gnupg/secring.gpg)" = 'y' ]; then
        [ ! "$dryrun" ] && gpg --batch --gen-key $dir/batch 
    fi

    echo 'Running gpg-agent'
    if [ ! "$dryrun" ]; then 
        [ "$(which gpg-agent)" ] && gpg-agent &&:
        [ "$(which gpg-connect-agent)" ] && gpg-connect-agent reloadagent /bye &&:
    fi 
    cd "$dir"
fi 

# mutt
echo 'Creating key for mutt' 
cat >mutt <<EOF
set from="$gmail"
set realname="$real"
set imap_user="$gmail"
set smtp_url="smtp://$gmail@smtp.gmail.com:587/"
set imap_pass="$gpass"
set smtp_pass="$gpass"
account-hook \$folder "set imap_user=$gmail imap_pass=$gpass"
EOF
mkdir -p ~/.mutt
encrypt mutt ~/.mutt/passwd.gpg

# offlineimap
echo 'Creating key for offlineimap'
cat >offlineimapuser <<EOF
$gmail
EOF
mkdir -p ~/.offlineimap
encrypt offlineimapuser ~/.offlineimap/user.gpg

cat >offlineimappass <<EOF
$gpass
EOF
encrypt offlineimappass ~/.offlineimap/passwd.gpg

echo 'Creating key for Mew'
cat >mew <<EOF
(setq mew-user "$gmail")
(setq mew-smtp-user "$gmail")
(setq mew-imap-user "$gmail")
EOF
encrypt mew ~/.emacs.d/mew.gpg

echo 'Creating stunnel pem'


[ "$dir" != ""  -a "$dir" != "/" ] && rm -rf "$dir"
cd - 

echo 'Completed. Logout or reboot your system.'

