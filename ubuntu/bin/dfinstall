#!/bin/bash -e
. ~/dotfiles/ubuntu/bin/dffunc

iinit()
{
    dfout2 "Getting package management environment"

    sedapt 's|http://archive\.ubuntu\.com|http://jp.archive.ubuntu.com|g'

    aptupdate
    aptinstall \
        apt-transport-https apt-utils bash wget curl git openssh-client \
        lsb-release software-properties-common \
        software-properties-common

    distribution="$(lsb_release -is | awk '{ print tolower($1) }')"
    release="$(lsb_release -sc)"

    if [ "$release" = "xenial" ]; then
        addapt ppa:ubuntu-lxc/lxd-stable
    fi

    packages=()
    if [ "$distribution" = "ubuntu" ]; then
        dfx sudo cp -v /etc/apt/sources.list "$DFBACKUP/sources.list"
        dfx sudo cp -v ~/dotfiles/ubuntu/list/sources.list /etc/apt/sources.list
        sedapt 's/xenial/'"$release"'/g'
        if [ "$(curl -s ipinfo.io/country)" != "JP" ]; then
            sedapt 's|http://jp.archive.ubuntu.com|http://archive.ubuntu.com|g'
        fi
        packages=(${packages[@]} language-pack-ja)
    fi
}

igo()
{
    which go 1>/dev/null 2>&1 &&:
    if [ $? -ne 0 ]; then
        if [ "$distribution" = "raspbian" ]; then
            dfx mkdir -p $HOME/go
            dfx wget -qO /tmp/go.tar.gz \
                'https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz'
            dfx sudo tar -C /tmp -xzf go.tar.gz
            dfx sudo cp /tmp/go/bin/go /usr/local/bin/go
            dfx sudo rm -rf /tmp/go /tmp/go.tar.gz
            set -x
            export PATH=$PATH:$HOME/go/bin:/usr/local/bin
            set +x
        else
            packages=(${packages[@]} "golang" "golang-go")
        fi
    else
        dfout3 "go has already installed"
    fi
}

igopackages()
{
    export GOPATH=$HOME/go
    dfx go get github.com/atsaki/termeter/cmd/termeter \
               github.com/walle/wiki/cmd/wiki \
               github.com/direnv/direnv
}

ipostfix()
{
    dfx sudo debconf-set-selections '<<<' 'postfix postfix/mailname string localhost'
    dfx sudo debconf-set-selections '<<<' 'postfix postfix/main_mailer_type string '"'"'Internet Site'"'"
}

idkmsheaders()
{
# Install linux-headers-`uname -r`{,-generic} packages.
# There use to virtualbox-dkms' .ko compilation process's
# (but don't install these now).
    if [ "$distribution" != "raspbian" ]; then
        apt show "linux-headers-$(uname -r)" 1>/dev/null 2>&1 &&:
        if [ $? -eq 0 ]; then 
            ver=$(uname -r | sed 's/-generic//g')
            packages=(${packages[@]} "linux-headers-$ver" "linux-headers-$ver-generic")
        fi
    fi
}

imutt()
{
    if [ "$release" = "xenial" ]; then
        packages=(${packages[@]} "mutt-patched")
    else
        packages=(${packages[@]} "mutt")
    fi
}

iapt()
{
    dfout2 "Installing packages"
    aptupdate
    aptupgrade

    grep "$HOME/dotfiles/ubuntu/list/dfinstall" -v -e '^#' -e '^$' > "$DFTMP/data"
    while read i; do
        packages=(${packages[@]} $i)
    done < "$DFTMP/data"
    aptinstall ${packages[@]}
}

ipip()
{
    dfx sudo -H pip3 install --upgrade pip
    # system
    packages=()
    grep "$HOME/dotfiles/list/pip-system" -v -e '^#' -e '^$' > "$DFTMP/data"
    while read i; do
        packages=(${packages[@]} $i)
    done < "$DFTMP/data"
    dfx sudo -H pip3 install ${packages[@]}
    # user
    packages=()
    grep "$HOME/dotfiles/list/pip" -v -e '^#' -e '^$' > "$DFTMP/data"
    while read i; do
        packages=(${packages[@]} $i)
    done < "$DFTMP/data"
    set +e
    dfx pip3 install --user ${packages[@]}
    # patch
    [ -f "$HOME/.local/lib/python3.5/site-packages/freetype/__init__.py" ] && \
        dfx patch -u "$HOME/.local/lib/python3.5/site-packages/freetype/__init__.py" \
            < "$HOME/dotfiles/patch/freetype-py/__init__.py.patch"
    set -e
}

iruby()
{
    # gem
    gv=$(gem --version | sed 's/\(.*\..*\)\..*/\1/')
    export PATH=$PATH:$HOME/.gem/ruby/$gv/bin
    #dfx gem install --user-install --no-doc rubygems-update showterm
    dfx gem install --user-install --no-doc rubygems-update
    dfx sudo $HOME/.gem/ruby/*/bin/update_rubygems
    
    # rbenv
    dfx mkdir -p $HOME/.rbenv
    [ ! -e ~/.rbenv ] && \
    dfx git clone https://github.com/sstephenson/rbenv.git ~/.rbenv --depth 1
    dfx mkdir -p $HOME/.rbenv/plugins
    [ ! -e ~/.rbenv/plugins/ruby-build ] && \
        dfx git clone https://github.com/sstephenson/ruby-build.git \
        ~/.rbenv/plugins/ruby-build --depth 1
    export PATH="$PATH:$HOME/.rbenv/bin"
    rv=$(rbenv install -l | grep -v - | tail -1)
    CONFIGURE_OPTS="--disable-install-rdoc" dfx rbenv install $rv
    dfx rbenv global $rv
}

itpm()
{
    gv=$(gem --version | sed 's/^\([^\.]\)\..*$/\1/')
    [ ! -d "$HOME/.tmux/plugins/tpm" ] && \
        dfx git clone --depth 1 https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    if [ $gv -eq 1 ]; then
        nr="--no-rdoc"
    else
        nr="--no-document"
    fi
    dfx gem install --user-install "$nr" tmuxinator github-pages
}

igitsecrets()
{
    dfx git clone --depth 1 https://github.com/awslabs/git-secrets.git $DFTMP/git-secrets
    dfx pushd $DFTMP/git-secrets
        make install PREFIX=$HOME
    dfx popd
}

ihub()
{
    dfx git clone --depth 1 https://github.com/github/hub.git $DFTMP/hub
    dfx pushd $DFTMP/hub
        script/build -o ~/bin/hub
    dfx popd
}

ifzf()
{
    if [ -d ~/.fzf ]; then
        dfx pushd ~/.fzf 
            dfx git pull origin master '&&:'
        dfx popd
    else
        dfx git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf 
    fi
    dfx ~/.fzf/install --all
}

itrans()
{
# trans
    dfx mkdir -p "$HOME/bin"
    dfx curl -sL git.io/trans -o "$HOME/bin/trans"
    dfx chmod +x "$HOME/bin/trans"
}

iufw()
{
    dfx sudo service ufw start '&&:'
    dfx sudo systemctl enable ufw
}

izsh()
{
    dfx wget -qO $HOME/bin/z.sh 'https://raw.githubusercontent.com/rupa/z/master/z.sh'
    zsh -c "zcompile $HOME/bin/z.sh"
}

help()
{
    (
    cat << EOF
dfinstall [commands...]
Install CLI packages.
Install all packages by default.
commands:
    init
    go
    postfix
    dkmsheaders
    mutt
    apt
    gopackages
    pip
    ruby
    tpm
    gitsecrets
    hub
    fzf
    trans
    ufw
    zsh
EOF
    ) >&2
    exit 1
}

run()
{
    dfout2 "dfinstall: $1"
    eval $1
}

if [ $# -eq 0 ]; then
    run iinit
    run igo
    run ipostfix
    run idkmsheaders
    run imutt
    run iapt
    run igopackages
    run ipip
    run iruby
    run itpm
    run igitsecrets
    run ihub
    run ifzf
    run itrans
    run iufw
    run izsh
elif [ $1 = help ]; then
    help
else
    while [ $# -gt 0 ]; do
        run "i$1"
        shift
    done
fi

finalize dfinstall

