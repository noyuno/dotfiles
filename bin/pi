#!/bin/bash -e

. $HOME/dotfiles/bin/dffunc

target=/var/git
user=git
domain=noyuno.mydns.jp
mail=noyuno@$domain
pdata=/var/postgresql/data

install()
{
    dfx sudo debconf-set-selections '<<<' 'debconf shared/accepted-oracle-license-v1-1 select true'
    dfx sudo debconf-set-selections '<<<' 'debconf shared/accepted-oracle-license-v1-1 seen true'
    aptinstall oracle-java8-jdk nginx fcgiwrap postgresql samba \
        php5 php5-pgsql php5-gd php5-fpm php5-curl \
        rrdtool perl libwww-perl libmailtools-perl libmime-lite-perl \
        librrds-perl libdbi-perl libxml-simple-perl libhttp-server-simple-perl \
        libconfig-general-perl libio-socket-ssl-perl
}

network()
{
    dfx sudo sed -i 's/^127\.0\.1\.1.*/127.0.1.1\tpi.'$domain' pi/' '/etc/hosts'
}

timezone()
{
    sudo timedatectl set-timezone Asia/Tokyo
}

motd()
{
    if [ -e /etc/motd ]; then
        dfx sudo mv /etc/motd /etc/motd.old
    fi
}

nginx()
{

    sudo domainname $domain
    cat << EOF | sudo tee /etc/nginx/sites-available/00-root.conf
proxy_cache_path /var/lib/nginx/cache levels=1:2 keys_zone=cache:512m inactive=1d  max_size=60g;

server_tokens off;
server_names_hash_bucket_size 64;

server {
    listen 80;
    server_name $domain localhost;
    include /etc/nginx/mime.types;
    charset UTF-8;
    charset_types text/css application/json text/plain application/javascript;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'Content-Type,Accept';
    add_header 'Access-Control-Allow-Method' 'GET, POST, OPTIONS, PUT, DELETE';

    location / {
        root /var/www/html;
    }

    location ~ /\.git {
        deny all;
    }

    location /log {
        deny all;
    }

    location ~ /secret {
        deny all;
    }

    location /bin {
        deny all;
    }

    location /jma/subscriber {
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME /var/www/html/jma/subscriber.php;
        include fastcgi_params;
    }

    location ~ \.php$ {
        root /var/www/html;
        try_files \$uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ \.cgi$ {
        root /var/www/html;
        try_files \$uri =404;
        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
    
    location /cgi {
        root /var/www/html;
        try_files \$uri =404;
        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF
    dfx sudo ln -sfnv /etc/nginx/sites-available/00-root.conf \
        /etc/nginx/sites-enabled/00-root.conf
    dfx sudo systemctl reload nginx.service
    dfx sudo chown -R noyuno:noyuno /var/www/html
    dfx /var/www/html/bin/chown
}

gitbucket()
{
    dfx sudo mkdir -p $target/repo
    cd $target
    cat << EOF | sudo -u git tee $target/update.sh
#!/bin/bash -e
curl -sL \$(curl -s https://api.github.com/repos/gitbucket/gitbucket/releases/latest | \\
    jq -r '.assets[] |select(.name=="gitbucket.war").browser_download_url') \\
    >/tmp/gitbucket.war
sudo -u git cp /tmp/gitbucket.war $target/gitbucket.war
sudo systemctl restart gitbucket.service
EOF
    dfx sudo chmod +x $target/update.sh
    if [ ! -e $target/gitbucket.war ]; then
        dfx $target/update
    fi

    cat << EOF | sudo tee /etc/systemd/system/gitbucket.service
[Unit]
Description=Git hosting service

[Service]
User=git
ExecStart=$target/run.sh

[Install]
WantedBy=multi-user.target
EOF

    cat << EOF | sudo -u git tee $target/run.sh
#!/bin/sh -e
(
/usr/bin/java -jar /var/git/gitbucket.war --port=8080 \
    --gitbucket.home=/var/git/repo
) >>/var/log/gitbucket.log 2>&1
EOF
    dfx sudo chmod +x $target/run.sh

    cat << EOF | sudo tee /etc/logrotate.d/gitbucket
/var/log/gitbucket.log {
    weekly
    coppytruncate
    rotate 52
    ocmpress
    delaycompress
    notifempty
}
EOF

    if [ ! -e $target/repo/gitbucket.conf ]; then
        cat << EOF | sudo tee $target/repo/gitbucket.conf
gravatar=false
notification=false
useSMTP=false
is_create_repository_option_public=false
ldap_authentication=false
ssh=true
allow_account_registration=false
ssh.host=noyuno.mydns.jp
allow_anonymous_access=true
ssh.port=4023
base_url=http\://git.noyuno.mydns.jp
EOF
    fi
    if [ ! -e $target/repo/database.conf ]; then
        cat << EOF | sudo tee $target/repo/database.conf
db {
  url = "jdbc:postgresql://localhost/gitbucket"
  user = "git"
  password = "database"
#  connectionTimeout = 30000
#  idleTimeout = 600000
#  maxLifetime = 1800000
#  minimumIdle = 10
#  maximumPoolSize = 10
}
EOF
    fi

    id $user 1>/dev/null 2>&1 &&:
    if [ $? -ne 0 ]; then
        dfx sudo useradd -d $target -s /bin/zsh $user
    fi
    dfx sudo chown -R $user:$user $target
    
    dfx sudo touch /var/log/gitbucket.log
    dfx sudo chown $user:$user /var/log/gitbucket.log

    dfx sudo systemctl daemon-reload
    dfx sudo systemctl enable gitbucket.service
    dfx sudo systemctl restart gitbucket.service
}

gitbucket_nginx()
{
    cat << EOF | sudo tee /etc/nginx/sites-available/gitbucket.conf
server {
    listen 80;
    #listen 443 ssl;
    server_name git.$domain;
    
    #ssl_certificate /etc/letsencrypt/live/git.$domain/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/git.$domain/privkey.pem;
    
    charset UTF-8;
    proxy_set_header Host \$http_host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_redirect off;
    proxy_max_temp_file_size 0;

    location /.well-known {
        alias /var/www/html/.well-known;
    }

    location / {
        proxy_pass http://localhost:8080;
        proxy_connect_timeout   150;
        proxy_send_timeout      100;
        proxy_read_timeout      100;
        proxy_buffers           4 32k;
        client_max_body_size    500m; # Big number is we can post big commits.
        client_body_buffer_size 128k;

    }

    location /robots.txt {
        alias /var/www/html/robots-disallow.txt;
    }

    location /assets/ {
        proxy_pass              http://localhost:8080/assets/;
        proxy_cache             cache;
        proxy_cache_key         \$host\$uri\$is_args\$args;
        proxy_cache_valid       200 301 302 1d;
        expires                 1d;
    }

    location /console/ {
        deny all;
    }
}
EOF
    dfx sudo ln -sfnv /etc/nginx/sites-available/gitbucket.conf \
        /etc/nginx/sites-enabled/gitbucket.conf
    dfx sudo systemctl reload nginx.service
}

gitbucket_plugins()
{
    plugins=$target/repo/plugins
    dfx sudo mkdir -p $plugins
    dfx sudo wget -qO $plugins/gist-2.12-4.8.0.jar \
        https://github.com/gitbucket/gitbucket-gist-plugin/releases/download/4.8.0/gitbucket-gist-plugin_2.12-4.8.0.jar
    dfx sudo wget -qO $plugins/network-1.4.jar \
        https://github.com/mrkm4ntr/gitbucket-network-plugin/releases/download/1.4/gitbucket-network-plugin_2.12-1.4.jar
    #dfx sudo wget -qO $plugins/pages-1.1.jar \
    #    https://github.com/gitbucket/gitbucket-pages-plugin/releases/download/v1.1/pages-plugin_2.12-1.1.jar

    dfx sudo chown -R $user:$user $plugins
    dfx sudo systemctl restart gitbucket.service
}

# hooks does not work
#gitsite()
#{
#    siteroot=/var/www/html
#    bare=$target/repo/repositories/noyuno/site.git
#    dfx sudo mkdir -p /var/log/git
#    dfx sudo chown git:git /var/log/git
#    if [ -e $bare ]; then
#        if [ -e $siteroot ]; then
#            dfx pushd $siteroot
#                dfx sudo git pull origin master
#            dfx popd
#        else
#            dfx sudo git clone $bare $siteroot
#        fi
#
#        dfx sudo chown -R git:git $siteroot
#
#        cat << EOF | sudo -u git tee $bare/hooks/post-receive
##!/bin/bash -e
#
#(
#cd /var/www/html
#git pull origin master
#)>/var/log/git/site-post-receive 2>&1
#EOF
#        dfx sudo -u git chmod +x $bare/hooks/post-receive
#
#        com="$siteroot/bin/anime-refresh-local"
#        job="5 20 * * * $com"
#        cat <(fgrep -i -v "$com" <(sudo crontab -u git -l)) <(echo "$job") | \
#            sudo crontab -u git -
#    fi
#}

ssl()
{
    erepo=certbot
    if [ ! -d ~/$erepo ]; then
        dfx git clone "https://github.com/$erepo/$erepo.git" ~/$erepo --depth 1
    fi
    dfx pushd ~/$erepo
        dfx sudo ./letsencrypt-auto certonly --webroot -w /var/www/html \
            -d git.$domain -m $mail --agree-tos
    dfx popd

}

psql()
{
    if [ ! -d $pdata ]; then
        dfx sudo mkdir -p $pdata
        dfx sudo chown postgres:postgres $pdata
        dfx sudo -u postgres /usr/lib/postgresql/9.4/bin/initdb -D $pdata -E UTF8 --no-locale
    fi

    sudo systemctl restart postgresql.service
}

gitbucket_psql()
{
    cat << EOF | dfx sudo -u postgres psql
create database gitbucket WITH template template0 encoding 'utf8';
EOF
    dfx sudo -u postgres createuser --pwprompt --interactive git
}

kanboard_psql()
{
    cat << EOF | dfx sudo -u postgres psql
create database kanboard;
EOF
    dfx sudo -u postgres createuser --pwprompt --interactive kanban
}

anime()
{
    if [ ! -e ~/noyuno.github.io ]; then
        git clone \
            "https://noyuno:$(cat ~/.ghpass)@github.com/noyuno/noyuno.github.io.git" \
            ~/noyuno.github.io
    fi
    command="/home/noyuno/noyuno.github.io/bin/anime-refresh"
    job="0 20 * * * $command"
    cat <(fgrep -i -v "$command" <(crontab -l)) <(echo "$job") | crontab -
}

samba()
{
    cat << "EOF" | sudo tee /etc/samba/smb.conf
[global]
    dos charset = cp932
    unix charset = UTF8
    display charset = UTF8
    workgroup = WORKGROUP
    dns proxy = no
    log file = /var/log/samba/log.%m
    max log size = 1000
    syslog = 0
    panic action = /usr/share/samba/panic-action %d
    server role = standalone server
    passdb backend = tdbsam
    obey pam restrictions = yes
    unix password sync = yes
    passwd program = /usr/bin/passwd %u
    passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
    pam password change = yes
    map to guest = bad user
    usershare allow guests = yes

[homes]
    comment = Home Directories
    browseable = no
    read only = yes
    create mask = 0700
    directory mask = 0700
    valid users = %S

[printers]
    comment = All Printers
    browseable = no
    path = /var/spool/samba
    printable = yes
    guest ok = no
    read only = yes
    create mask = 0700

[pi]
    path = /var/samba/share
    read only = no
    guest ok = yes
    force user = nobody
    create mask = 777
    directory mask = 777
EOF

    dfx sudo ufw allow 137
    dfx sudo ufw allow 138
    dfx sudo ufw allow 139
    dfx sudo ufw allow 445

    dfx sudo mkdir -p /var/samba/share

    dfx sudo service smbd restart
    dfx sudo service nmbd restart
}

zeroconf()
{
    cat << EOF | sudo tee /etc/avahi/services/pi.service
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
    <name replace-wildcards="yes">%h</name>
    <service>
        <type>_smb._tcp</type>
        <port>139</port>
    </service>
    <service>
        <type>_http._tcp</type>
        <port>80</port>
    </service>
</service-group>
EOF
    dfx sudo systemctl restart avahi-daemon.service
}

kanboard()
{
    kp=/var/www/kanban
    if [ ! -e $kp ]; then
        dfx sudo wget -qO /tmp/kanboard.zip https://kanboard.net/kanboard-latest.zip
        dfx sudo unzip -od /var/www /tmp/kanboard.zip
        dfx sudo mv /var/www/kanboard $kp
        dfx sudo cp $kp/config.default.php $kp/config.php
    fi

    if [ ! -e $kp/plugins/Gantt ]; then
        dfx sudo wget -qO /tmp/kanboard-gantt.zip \
            https://github.com/kanboard/plugin-gantt/releases/download/v1.0.1/Gantt-1.0.1.zip
        dfx sudo mkdir -p $kp/plugins
        dfx sudo unzip -od $kp/plugins /tmp/kanboard-gantt.zip
    fi
    dfx sudo chown -R www-data:www-data $kp
}

kanboard_nginx()
{
    cat << EOF | sudo tee /etc/nginx/sites-available/kanboard.conf
server {
    listen 80;
    server_name kanban.$domain;
    charset UTF-8;
    root   /var/www/kanban;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location /robots.txt {
        alias /var/www/html/robots-disallow.txt;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location ~ \.php$ {
        root /var/www/kanban;
        try_files \$uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF
    dfx sudo ln -sfnv /etc/nginx/sites-available/kanboard.conf \
        /etc/nginx/sites-enabled/kanboard.conf
    dfx sudo systemctl reload nginx.service

}

netdata()
{
    bash <(curl -Ss https://my-netdata.io/kickstart.sh)
}

netdata_conf()
{
    pushd /etc/netdata
        sudo patch -bN < $HOME/dotfiles/patch/netdata/netdata.conf.patch
    popd
}

netdata_nginx()
{
    cat << EOF | sudo tee /etc/nginx/sites-available/netdata.conf
upstream backend {
    # the netdata server
    server 127.0.0.1:19999;
    keepalive 64;
}

server {
    # nginx listens to this
    listen 80;

    # the virtual host name of this
    server_name status.$domain;

    location / {
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Server \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_pass_request_headers on;
        proxy_set_header Connection "keep-alive";
        proxy_store off;
    }

    location /robots.txt {
        alias /var/www/html/robots-disallow.txt;
    }
}
EOF
    dfx sudo ln -sfnv /etc/nginx/sites-available/netdata.conf \
        /etc/nginx/sites-enabled/netdata.conf
    dfx sudo systemctl reload nginx.service

}


pychromecast()
{
    sudo pip3 install pychromecast

}

ddns()
{
    cat << EOF | sudo tee /etc/cron.d/ddnsauth
17 */6 * * * noyuno /home/noyuno/bin/ddnsauth
EOF
}

anime()
{
    cat << EOF | sudo tee /etc/cron.d/anime
19 */12 * * * noyuno /var/www/html/bin/get-anime
EOF
}

showterm=/var/www/showterm
showterm()
{
    if [ ! -d $showterm ]; then
        dfx sudo chown noyuno:noyuno /var/www
        dfx git clone --depth 1 'https://github.com/ConradIrwin/showterm.io' $showterm
    fi
    aptinstall libpq-dev libsqlite3-dev
    pushd $showterm
        cat << EOF | tee /var/www/showterm/config/database.yml
development:
  adapter: sqlite3
  database: $showterm/showterm.sqlite3
  pool: 5
  timeout: 5000
EOF
        dfout2 rbenv install 2.2.2
        ruby --version | grep 'ruby 2.2.2' || CONFIGURE_OPTS="--disable-install-rdoc" rbenv install 2.2.2
        rbenv global 2.2.2
        dfx gem install --no-ri --no-rdoc bundler
        grep gem < $HOME/.zshenv || cat << "EOF" | tee -a $HOME/.zshenv
export PATH="$HOME/.gem/ruby/2.2.0/bin:$PATH"
EOF
        export PATH="$HOME/.gem/ruby/2.2.0/bin:$PATH"
        dfx bundle install
        dfx patch -bNp0 '<' $HOME/dotfiles/patch/showterm/application.html.erb.patch
        dfx bundle exec rake db:create db:migrate db:seed
        dfx bundle exec rake assets:precompile
    popd

}

showterm_conf()
{
    cat << EOF | sudo tee /etc/systemd/system/showterm.service
[Unit]
Description=Recording terminal service

[Service]
User=noyuno
ExecStart=$showterm/run.sh
WorkingDirectory=$showterm

[Install]
WantedBy=multi-user.target
EOF

    cat << EOF | sudo tee $showterm/run.sh
#!/bin/sh -e
(
export PATH="\$HOME/.gem/ruby/2.2.0/bin:\$HOME/.rbenv/bin:\$HOME/.rbenv/shims:\$PATH"
which ruby
which rbenv
rbenv global 2.2.2
$showterm/script/rails server --binding 0.0.0.0 --port 8081
) >>/var/log/showterm.log 2>&1
EOF
    dfx sudo chmod +x $showterm/run.sh

    cat << EOF | sudo tee /etc/logrotate.d/showterm
/var/log/showterm.log {
    weekly
    coppytruncate
    rotate 52
    ocmpress
    delaycompress
    notifempty
}
EOF
    dfx sudo touch /var/log/showterm.log
    dfx sudo chown noyuno:noyuno /var/log/showterm.log
    
    dfx sudo systemctl restart showterm
    dfx sudo systemctl enable gitbucket.service
}

showterm_nginx()
{
    cat << EOF | sudo tee /etc/nginx/sites-available/showterm.conf
server {
    listen 80;
    server_name record.$domain;
    charset UTF-8;
    proxy_set_header Host \$http_host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_redirect off;
    proxy_max_temp_file_size 0;
    error_page 404 404.html;
    error_page 422 422.html;
    error_page 500 500.html;

    location /.well-known {
        alias /var/www/html/.well-known;
    }

    location / {
        proxy_pass http://localhost:8081;
        proxy_connect_timeout   150;
        proxy_send_timeout      100;
        proxy_read_timeout      100;
        proxy_buffers           4 32k;
        client_max_body_size    500m; # Big number is we can post big commits.
        client_body_buffer_size 128k;

    }

    location /robots.txt {
        alias /var/www/html/robots-disallow.txt;
    }

    location /assets/ {
        proxy_pass              http://localhost:8081/assets/;
        proxy_cache             cache;
        proxy_cache_key         \$host\$uri\$is_args\$args;
        proxy_cache_valid       200 301 302 1d;
        expires                 1d;
    }

    location /console/ {
        deny all;
    }
}
EOF
    dfx sudo ln -sfnv /etc/nginx/sites-available/showterm.conf \
        /etc/nginx/sites-enabled/showterm.conf
    dfx sudo systemctl reload nginx.service
}

if [ "$(lsb_release -is)" != "Raspbian" ]; then
    echo "this command is Raspbian only" 1>&2
    exit 1
fi

if [ $# -eq 0 ]; then
    install
    motd
    timezone
    ssl
    nginx
    psql
    gitbucket_psql
    kanboard_psql
    gitbucket
    gitbucket_nginx
    kanboard
    kanboard_nginx
    netdata
    netdata_conf
    netdata_nginx
    zeroconf
    pychromecast
    ddns
    anime
else
    eval $*
fi

