#!/bin/bash -e

. "$HOME/dotfiles/bin/dffunc"

name=$(git config --global user.name)
jsonurl=http://noyuno.space/static/repo.json
outtmp=$DFTMP/out
namelength=18
if [ "$1" ]; then
    base="$1"
else
    base="$HOME"
fi

_check_url()
{
    name=$1
    remote_name=$2
    remote_url=$3
    matched=
    while read line; do
        rname=$(echo $line | cut -d ' ' -f 1)
        rurl=$(echo $line | cut -d ' ' -f 2)
        if [ "$rname" = "$remote_name" ]; then
            matched=1
            if [ "$rurl" != "$remote_url" ]; then
                echo -e "\e[33m[ change remote ]\e[m $name($remote_name) to $remote_url"
                git remote set-url "$remote_name" "$remote_url"
            fi
        fi
    done
    if [ ! "$matched" ]; then
        echo -e "\e[33m[ add remote ]\e[m $name($remote_name) to $remote_url"
        git remote add "$remote_name" "$remote_url"
    fi
}

_check_remote()
{
    name=$1
    remote_name=$2
    remote_url=$3
    git remote -v | _check_url $name $remote_name $remote_url
}

_update_repo()
{
    name=$1
    remote_name=$2
    remote_url=$3
    dirty=$4
    repobase=$5
    if [ -d "$repobase/.git" ]; then
        pushd "$repobase" >/dev/null
        _check_remote  "$name" "$remote_name" "$remote_url"
        branch_name=$(git branch | grep '*.*' | sed -e 's/\*\ //')
        # check whether local branch exists this remote branch
        if ! git branch -va | grep remotes/$remote_name/$branch_name" " >/dev/null ; then
            # local branch does not exists this remote branch
            # maybe upstream
            ret=$(git fetch $remote_name 2>$DFTMP/git-fetch-stderr-$name-$remote_name &&:)
            if [ $? -eq 0 ]; then
                if [ "$ret" = "" ]; then
                    return 0
                else
                    return 3
                fi
            else
                cat $DFTMP/git-fetch-stderr-$name-$remote_name
                return 8
            fi
        fi
        ret=$(git -c color.status=always pull $remote_name $branch_name 2>$DFTMP/git-pull-stderr-$name-$remote_name &&:)
        if [ $? -eq 0 ]; then
            echo "$ret" | grep '^Already up[- ]to[- ]date.$' >/dev/null 2>&1 &&:
            if [ $? -eq 0 ]; then
                # did update local branch?
                localhead=$(git branch -va --no-color | awk '/^*/{print $3}')
                remotehead=$(git branch -va --no-color | awk '/remotes\/'$remote_name'\/master/{print $2}')
                if [ "$localhead" = "$remotehead" ]; then
                    return 0
                else
                    return 4
                fi
            else
                cat $DFTMP/git-pull-stderr-$name-$remote_name
                echo "$ret"
                return 2
            fi
        elif grep "Couldn't find remote" < $DFTMP/git-pull-stderr-$name-$remote_name; then
            # remote has not this branch
            return 6
        elif grep "Authentication failed" < $DFTMP/git-pull-stderr-$name-$remote_name;then
            return 7
        else
            # conflict, abort merging
            echo -e "\e[31m[ conflict ] abort merging $name\e[m ($(git status -s | wc -l) files)"
            cat $DFTMP/git-pull-stderr-$name-$remote_name
            echo "$ret"
            dfx git merge --abort
            return 5
        fi
        popd >/dev/null
    else
        mkdir -p $repobase
        git clone "$remote_url" "$repobase"
        return 1
    fi
}

_check_dirty()
{
    repobase=$1
    if [ -d "$repobase/.git" ]; then
        pushd "$repobase" >/dev/null
        status=$(git status -s)
        if [ "$status" ]; then
            echo -e "\e[35m[ dirty ] $name\e[m ($(echo "$status" | wc -l) files)"
            git -c color.status=always status -s
            return 0
        fi
        popd >/dev/null
    fi
    return 1
}

update_repo2()
{
    r=$1
    i=$2
    name=$(jq -r "$r.name" "$json")
    rb=$(jq -r "$r.path" "$json")
    if [ "$rb" = "null" ]; then
        repobase=$base/$name
    else
        repobase=$base/$rb
    fi
    remotelen=$(jq -r "$r"'.remotes | length' "$json")
    dirty=
    if _check_dirty $repobase ; then
        dirty=1
    fi
    latest=
    declare -A remote_status
    for j in $(seq 0 $((remotelen - 1))); do
        remote_name=$(jq -r "$r"'.remotes['$j'].name' $json)
        remote_url=$(jq -r "$r"'.remotes['$j'].url' $json)
        _update_repo "$name" "$remote_name" "$remote_url" "$dirty" "$repobase" &&:
        case "$?" in
            0) # latest
                remote_status[$remote_name]="latest " ;;
            1) # clone
                remote_status[$remote_name]="\e[32mclone   \e[m" ;;
            2) # pull
                remote_status[$remote_name]="\e[34mpull    \e[m" ;;
            3) # fetch
                remote_status[$remote_name]="\e[35mfetch   \e[m" ;;
            4) # forward
                remote_status[$remote_name]="\e[33mforward \e[m" ;;
            5) # conflict, abort merging
                remote_status[$remote_name]="\e[31mconflict\e[m" ;;
            6) # branch not found
                remote_status[$remote_name]="\e[35mnot found\e[m" ;;
            7) # authentication failed
                remote_status[$remote_name]="\e31mauth failure\e[m"
                exit 1 ;;
            8) # fetch failed
                remote_status[$remote_name]="\e31mfetch failure\e[m" ;;
        esac
    done

    branch_name="("$(git branch | grep '*.*' | sed -e 's/\*\ //')")"
    if [ "$branch_name" = "(master)" ]; then
        branch_name=""
    fi
    dirty_message=""
    if [ "$dirty" ]; then
        printf "%-${namelength}s" "$name$branch_name" >> $outtmp
        dirty_message="\e[35mdirty\e[m"
    else
        printf "%-$((namelength + 5))s" "$name$branch_name" >> $outtmp
        dirty_message=""
    fi
    echo -ne "$dirty_message " >> $outtmp
    for k in "${!remote_status[@]}"; do
        echo -ne "$k:${remote_status[$k]} " >> $outtmp
    done
    echo "" >> $outtmp
    if [ "$i" = "" ]; then
        echo -ne "\e[2K\e[1Gprocessed $name (primary)"
    else
        echo -ne "\e[2K\e[1Gprocessed $name ($((i+1)) of $len)"
    fi
}

update_repo()
{
    len=$(jq -r ".repositories | length" "$json")
    for i in $(seq 0 $((len - 1))); do
        if [ "$(jq -r '.repositories['$i'].name' $json)" != "$primaryrepo" ]; then
            (
            update_repo2 '.repositories['$i']' $i
            ) &
        fi
    done
}

# pi
json="$DFTMP/repo.json"
curl -sL "$jsonurl" > "$json"
primaryrepo=$(jq -r .primary "$json")
update_repo2 '.repositories[] | select(.name=="'$primaryrepo'")'
update_repo

wait

echo -ne "\e[2K\e[1G"
sort -f < $outtmp

finalize

