#!/bin/bash -e

help() {
    if [ $# -ge 1 ]; then
        echo "error: $*" >&2
        echo "" >&2
    fi
    cat << EOF >&2
blog <command>
    blog management tool

<command>:
    init|i: init repository
    new|n <title>: new article with url-title
    push|p: build and push blog
    compress|c: compress images
    edit|e: edit found file
    show|s: show
    stop|t: stop service
    keyword|k: edit files including specified keyword
    help: show this help
EOF
    exit 1
}

init() {
    git clone git@github.com:noyuno/blog.git $HOME/blog
    pushd $HOME/blog >/dev/null
        git submodule init
        git submodule update
        git submodule foreach git pull origin master
        if which bundle >/dev/null 2>&1 ; then
            gem install bundle
        fi
        bundle install
    popd >/dev/null
}

new() {
    base="$HOME/blog"
    title="$1"
    if [ ! "$title" ]; then
        echo "required title" 1>&2
        exit 1
    fi
    if [ ! -d "$HOME/blog" ]; then
        echo "clone blog repo" 1>&2
        exit  1
    fi

    ybase="$base/_posts/$(date +%Y)"
    mkdir -p "$ybase"
    f="$ybase/$(date +%Y-%m-%d)-$title.md"
    if [ ! -f "$f" ]; then
        cp "$HOME/dotfiles/templates/blog.md" "$f"
        sed -i 's|^title:|title: '"'$title'"'|' "$f"
        sed -i 's|^image:|image: /images/'"$(date +%Y-%m-%d)-$title.png"'|' "$f"
    fi
    $EDITOR "$f"
}

push() {
    pushd $HOME/blog >/dev/null
        echo -n "noyuno.github.io: "
        pushd _site >/dev/null
            git clean -fdxq
            git checkout .
            git pull -q origin master
        popd >/dev/null
        bundle exec jekyll build -q
        pushd _site >/dev/null
            git add .
            git commit -q -m 'Update article'
            git push -q origin master
        popd >/dev/null
        echo "ok"
        echo -n "blog: "
        git add .
        git commit -q -m 'Update article' &&:
        git push -q origin master &&:
        echo ok
    popd >/dev/null
}

compress () {
    pushd $HOME/blog/images >/dev/null
        pngquant --ext .png -f *.png
    popd >/dev/null
}

__fileselector=""
fileselector () {
    if [ $# -eq 0 ]; then
        echo "could not found specied file" >&2
        exit 1
    fi
    n=1
    declare -A a
    if [ $# -gt 1 ]; then
        p=1
        for i in $* ; do
            echo $p: $i
            a[$p]=$i
            p=$((p+1))
        done
        echo -n "which do you want edit: "
        read n
        __fileselector=${a[$n]}
    else
        __fileselector=$1
    fi
    return 0
}

edit () {
    pushd $HOME/blog/_posts >/dev/null
        fileselector `find . -type f | grep "$1"`
        $EDITOR $__fileselector
    popd >/dev/null
}

editk () {
    fileselector $(ag -l "$1" "$HOME/blog")
    $EDITOR $__fileselector
}

show () {
    pushd $HOME/blog >/dev/null
        p=$(ps -x|grep '[j]ekyll serve'|awk '{print $1}')
        if [ "$p" ]; then
            echo "service already running, pid=$p" >&2
        else
            bundle exec jekyll serve &
        fi
        xdg-open 'http://localhost:4000/'
    popd >/dev/null
}

stop () {
    p=$(ps -x|grep '[j]ekyll serve'|awk '{print $1}')
    if [ "$p" ]; then
        kill $p
    else
        echo "service is not running" >&2
        exit 1
    fi
}

case $1 in
i|init) init ;;
n|new) new $2 ;;
p|push) push $* ;;
c|compress) compress ;;
e|edit)
    shift
    if [ $# -ge 1 ]; then
        edit $*
    else
        help "not enough edit argument"
    fi
    ;;
k|keyword)
    shift
    if [ $# -ge 1 ]; then
        editk $*
    else
        help "not enough keyword"
    fi
    ;;
s|show) show ;;
t|stop) stop ;;
help) help ;;
*) 
    help "unknown command: $1"
    ;;
esac

