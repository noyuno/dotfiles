#!/bin/bash -e

NEW=
DRYRUN=
VERBOSE=

run()
{
    src="$HOME/" # do not forget trailing slash
    dest="/mnt/karen/share/backup/$(hostname)"
    server=pi
    date=$(date +%Y%m%d-%H%M%S)
    destlen=$(echo "$dest/$date" | awk '{print length($0)}')
    tmp=/tmp/backup-$date
    log=$dest/log/$date.log
    catalog=$dest/catalog
    args="-a -A -z -C --delay-updates --info=progress2 -h
        --remote-option=--log-file=$dest/log/$date.log --exclude-from $HOME/dotfiles/list/snapshot-ignore"
    #latestbackup=$(ssh pi find $dest -maxdepth 1 -type d -name `date +%Y%m`"\*" | sort -r | head -n 1)
    ssh $server "mkdir -p $dest ; touch $dest/catalog"
    latestbackup=$(ssh pi cat $catalog | tail -n 1 | awk -F' ' '{print $1}')
    if [ ! "$NEW" -a "$latestbackup" ]; then
        args=$args" --link-dest $dest/$latestbackup/$src"
    fi
    if [ "$VERBOSE" ]; then
        args=$args" -v"
    else
        args=$args" --info=name0"
    fi
    if [ "$DRYRUN" ]; then
        args=$args" -n"
    fi

    ionice -c 3 -p $$
    renice +12  -p $$

    mkdir -p $tmp

    cat << EOF | tee $tmp/info
args=$args
src=$src
server=$server
dest=$dest
date=$date
destlen=$destlen
catalog=$catalog
latestbackup=$latestbackup
log=$log
EOF
    if [ "$DRYRUN" ]; then
        ssh $server mkdir -p $dest/log
    else
        ssh $server "mkdir -p $dest/log ; mkdir -p $dest/$date/$src"
        scp $tmp/info $server:$dest/log/$date.info
    fi
    rsync $args $src $server:$dest/$date/$src &&:
    if [ ! "$DRYRUN" ]; then
        ssh $server "sync ; ln -sfn $date $dest/latest"
        if [ "$NEW" ]; then
            ssh $server "echo $date complete | tee -a $catalog"
        else
            ssh $server "echo $date diff | tee -a $catalog"
        fi
    fi
    echo -e "\e[34mFinished\e[m"

    if [ "$tmp" ]; then
        rm -rf "$tmp"
    fi
}

help()
{
    cat << EOF
backup: backup HOME directory to remote server by rsync
usage:
    backup [options...]

options:
    -e: new backup period (do not make hard link)
    -n: dry-run
    -v: verbose
    -h: this help
EOF
    exit 1
}

while getopts nevh OPT; do
    case $OPT in
        e) NEW=1 ;;
        n) DRYRUN=1 ;;
        v) VERBOSE=1 ;;
        h) help ;;
    esac
done

run

