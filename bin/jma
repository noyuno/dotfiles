#!/usr/bin/env python3

import json
import os
import sys
import time
import unicodedata
import urllib.parse
import urllib.request
try:
    import argparse
    import arrow
    import curses
    import websocket
except:
    print("type: pip install argparse arrow websocket-client")
    sys.exit(1)

quoted_delimiter = "%01"
delimiter = urllib.parse.unquote(quoted_delimiter)
sleep_time = 3600
notify_time = 2
url = "noyuno.mydns.jp"
websocket_url = 'ws://' + url + ':8000'


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    
    @staticmethod
    def nocolor():
        bcolors.HEADER = ""
        bcolors.OKBLUE = ""
        bcolors.OKGREEN = ""
        bcolors.WARNING = ""
        bcolors.FAIL = ""
        bcolors.ENDC = ""
        bcolors.BOLD = ""
        bcolors.UNDERLINE = ""

def jastr(string, size):
    ret = ""
    s = 0
    for ch in string:
        if s + 1 == size:
            ret += " "
            return ret
        elif s + 0 >= size:
            ret+=""
            return ret
        try:
            name = unicodedata.name(ch)
        except:
            continue
        if "CJK UNIFIED" in name \
            or "HIRAGANA" in name \
            or "KATAKANA" in name \
            or "FULLWIDTH" in name \
            or "IDEOGRAPHIC" in name \
            or "ANGLE BRACKET" in name \
            or "WAVE DASH" in name \
            or "CORNER" in name:
            s += 2
            ret += ch
        else:
            s += 1
            ret += ch

    ret += " " * (size - s)
    return ret

notifysent = []
def notifysend(id, text):
    if id not in notifysent:
        subprocess.check_output(["notify-send", text])
        notifysent.append(id)

quiet = False
def output(text, end="\n"):
    sys.stdout.write(text + end)

class jsonitem:
    key = ""
    value = ""

    def __init__(self, k, v):
        self.key = k
        self.value = v

def dataloop(d):
    title = d["infokind"]
    blacklist = [
        "全般海上警報",
        "全般海上警報（定時）", 
        "地方気象情報",
        "地方海上予報", 
        "地方海上予報（Ｈ２８）", 
        "地方海上警報",
        "地方海上警報（Ｈ２８）", 
        "季節観測", 
        "府県天気予報",
        "府県天気概況", 
        "府県気象情報", 
        "気象警報・注意報",
        "特殊気象報",
        "環境気象情報",
        "生物季節観測"
        "異常天候早期警戒情報",
        "竜巻注意情報", 
        "竜巻注意情報（目撃情報付き）", 
        "紫外線観測データ", 
        "警報級の可能性（明後日以降）",
        "警報級の可能性（明日まで）",
        "降灰予報（定時）",
        "生物季節観測",
        "異常天候早期警戒情報", 
        "府県週間天気予報", 
        "地方高温注意情報", 
        "降灰予報", 
        "台風解析・予報情報（３日予報）"
        ]
    if args.all == False and title in blacklist:
        return [ False, ""]

    outstr = ""
    cols = curses.tigetnum("cols")
    datecol = 6
    titlecol = 9
    if args.debug:
        titlecol = 33
    disccol = cols - datecol - titlecol - 1
    # ignore "one"
    # datetime
    adate = arrow.get(d["target-datetime"])
    outstr += (jastr("{0:0>2}".format(adate.hour) + \
        ":" + "{0:0>2}".format(adate.minute), datecol))
    # title
    showtitle = jastr(title, titlecol)
    showtitle = bcolors.WARNING + showtitle + bcolors.ENDC \
        if title.find("津波") >= 0 or \
            title.find("特別") >= 0 else showtitle
    outstr += (showtitle)
    # text
    text = str(d["text"])
    outstr += (jastr(text.replace("\r", "").replace("\n", ""), disccol))
    return [ True, outstr ]

def on_message(ws, message):
    on_message_keep(ws, message)
    ws.close()

def on_message_keep(ws, message):
    data = json.loads(message)
    if data["status"]:
        i = 0
        while i < data["count"]:
            [ f, outstr ] = dataloop(data["data"][i])
            if f:
                if i + 1 == data["count"]:
                    output(outstr, end="")
                else:
                    output(outstr)
            i += 1

def on_open(ws):
    ws.send("cache")

def main(keep):
    if keep:
        ws = websocket.WebSocketApp(websocket_url, on_message=on_message_keep, on_open=on_open)
    else:
        ws = websocket.WebSocketApp(websocket_url, on_message=on_message, on_open=on_open)
    ws.run_forever()

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser(
            description = "Display JMA disaster report.", 
            epilog = "Powered by 気象庁")
        parser.add_argument("--count", "-n", type=int)
        parser.add_argument("--all", "-a", action = "store_true")
        parser.add_argument("--keep", "-k", action = "store_true")
        parser.add_argument("--quiet", "-q", action = "store_true")
        parser.add_argument("--no-color", action = "store_true")
        parser.add_argument("--debug", action = "store_true")
        args = parser.parse_args()

        if args.count is None: args.count = 30
        quiet = args.quiet
        if args.no_color: bcolors.nocolor()
        
        curses.setupterm()
        main(args.keep)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        sys.stderr.writelines(str(e) + "\n")
        sys.stderr.flush()

